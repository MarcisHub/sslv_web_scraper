name: CI/CD-main

on:
  push:
    branches: [ "main" ]

jobs:

  Build:
    runs-on: ubuntu-latest
    env:
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
    - uses: actions/checkout@v2
    - name: Before build step 1 creating database.ini file 
      run: |
        ls -la
        echo "[postgresql]" > src/ws/database.ini
        echo "host=db" >> src/ws/database.ini
        echo "${{ secrets.PG_DB_NAME }}" >> src/ws/database.ini
        echo "${{ secrets.PG_DB_USER }}" >> src/ws/database.ini
        echo "${{ secrets.PG_DB_PASS }}" >> src/ws/database.ini
        ls -la
        cat src/ws/database.ini
        
    - name: Before build step 2 create .env.prod file
      run: |
        ls -la
        echo "# ws_worker container env variables" > .env.prod
        echo "${{ secrets.DEST_EMAIL }}" >> .env.prod 
        echo "${{ secrets.SRC_EMAIL }}" >> .env.prod 
        echo "${{ secrets.SENDGRID_API_KEY }}" >> .env.prod
        echo "# postgres db container env variable" >> .env.prod
        echo "${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod 
        ls -la
        
        
    - name: Show environment
      run: |
        cat /etc/os-release
        docker -v
        docker-compose -v
        docker compose version
        python3 -V
        pip install boto3
        
    - name: Before build step 3 download last DB file from S3 bucket
      run: |
        python3 ./src/db/get_last_db_backup.py
        cp *.sql ./src/db 
        ls -lh ./src/db | grep sql
        
        
    - name: Build 3 containers
      run: |
        pwd
        docker-compose --env-file .env.prod up -d
    
    - name: List DB table sizes
      run: |
        sleep 15
        docker-compose ps
        docker exec sslv_web_scraper_db_1  psql -U new_docker_user -d new_docker_db -c '\dt+'
        
    - name: Run docker compose ps 
      run: |
        sleep 10
        docker-compose ps
      
    - name: Run compose down
      run: docker-compose down


  Deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOSTNAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ubuntu/CounterApp &&
            git checkout master &&
            git fetch --all &&
            git reset --hard origin/master &&
            git pull origin master &&
            docker-compose -f docker-compose.prod.yml up -d --build 

